
ATmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000002de  00000372  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080010e  0080010e  00000380  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000077  00000000  00000000  00000af1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000388  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000182  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000028a  00000000  00000000  00001072  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000030  00000000  00000000  000012fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000011b  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000040  00000000  00000000  00001447  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000038  00000000  00000000  00001487  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ed       	ldi	r30, 0xDE	; 222
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 31       	cpi	r26, 0x1E	; 30
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <main>
  c6:	0c 94 6d 01 	jmp	0x2da	; 0x2da <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <display>:
		if(!(PINE&0x80))
			if(run == 0) min = 0, sec = 0;
	}
}

void display(int MIN, int SEC){
  ce:	ef 92       	push	r14
  d0:	ff 92       	push	r15
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	fb 01       	movw	r30, r22
	M10 = (MIN/10)%10;
  dc:	2a e0       	ldi	r18, 0x0A	; 10
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	b9 01       	movw	r22, r18
  e2:	0e 94 46 01 	call	0x28c	; 0x28c <__divmodhi4>
  e6:	8c 01       	movw	r16, r24
  e8:	cb 01       	movw	r24, r22
  ea:	b9 01       	movw	r22, r18
  ec:	0e 94 46 01 	call	0x28c	; 0x28c <__divmodhi4>
  f0:	7c 01       	movw	r14, r24
  f2:	90 93 1d 01 	sts	0x011D, r25
  f6:	80 93 1c 01 	sts	0x011C, r24
	M1 = MIN % 10;
  fa:	10 93 1b 01 	sts	0x011B, r17
  fe:	00 93 1a 01 	sts	0x011A, r16
	S10 = (SEC/1000)%10;
 102:	cf 01       	movw	r24, r30
 104:	68 ee       	ldi	r22, 0xE8	; 232
 106:	73 e0       	ldi	r23, 0x03	; 3
 108:	0e 94 46 01 	call	0x28c	; 0x28c <__divmodhi4>
 10c:	cb 01       	movw	r24, r22
 10e:	b9 01       	movw	r22, r18
 110:	0e 94 46 01 	call	0x28c	; 0x28c <__divmodhi4>
 114:	ec 01       	movw	r28, r24
 116:	90 93 0f 01 	sts	0x010F, r25
 11a:	80 93 0e 01 	sts	0x010E, r24
	S1 = (SEC/100)%10;
 11e:	cf 01       	movw	r24, r30
 120:	64 e6       	ldi	r22, 0x64	; 100
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	0e 94 46 01 	call	0x28c	; 0x28c <__divmodhi4>
 128:	cb 01       	movw	r24, r22
 12a:	b9 01       	movw	r22, r18
 12c:	0e 94 46 01 	call	0x28c	; 0x28c <__divmodhi4>
 130:	90 93 11 01 	sts	0x0111, r25
 134:	80 93 10 01 	sts	0x0110, r24
	PORTD = digit[S1], PORTE = latch[0], _delay_ms(2.5);
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	31 e0       	ldi	r19, 0x01	; 1
 13c:	82 0f       	add	r24, r18
 13e:	93 1f       	adc	r25, r19
 140:	fc 01       	movw	r30, r24
 142:	80 81       	ld	r24, Z
 144:	82 bb       	out	0x12, r24	; 18
 146:	80 91 0a 01 	lds	r24, 0x010A
 14a:	83 b9       	out	0x03, r24	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14c:	8f e0       	ldi	r24, 0x0F	; 15
 14e:	97 e2       	ldi	r25, 0x27	; 39
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <display+0x82>
 154:	00 c0       	rjmp	.+0      	; 0x156 <display+0x88>
 156:	00 00       	nop
	PORTD = digit[S10],PORTE = latch[1],  _delay_ms(2.5);
 158:	c2 0f       	add	r28, r18
 15a:	d3 1f       	adc	r29, r19
 15c:	88 81       	ld	r24, Y
 15e:	82 bb       	out	0x12, r24	; 18
 160:	80 91 0b 01 	lds	r24, 0x010B
 164:	83 b9       	out	0x03, r24	; 3
 166:	ef e0       	ldi	r30, 0x0F	; 15
 168:	f7 e2       	ldi	r31, 0x27	; 39
 16a:	31 97       	sbiw	r30, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <display+0x9c>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <display+0xa2>
 170:	00 00       	nop
	PORTD = digit[M1]&0x7f, PORTE = latch[2], _delay_ms(2.5);
 172:	f9 01       	movw	r30, r18
 174:	e0 0f       	add	r30, r16
 176:	f1 1f       	adc	r31, r17
 178:	80 81       	ld	r24, Z
 17a:	8f 77       	andi	r24, 0x7F	; 127
 17c:	82 bb       	out	0x12, r24	; 18
 17e:	80 91 0c 01 	lds	r24, 0x010C
 182:	83 b9       	out	0x03, r24	; 3
 184:	8f e0       	ldi	r24, 0x0F	; 15
 186:	97 e2       	ldi	r25, 0x27	; 39
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <display+0xba>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <display+0xc0>
 18e:	00 00       	nop
	PORTD = digit[M10], PORTE = latch[3], _delay_ms(2.5);
 190:	e2 0e       	add	r14, r18
 192:	f3 1e       	adc	r15, r19
 194:	f7 01       	movw	r30, r14
 196:	80 81       	ld	r24, Z
 198:	82 bb       	out	0x12, r24	; 18
 19a:	80 91 0d 01 	lds	r24, 0x010D
 19e:	83 b9       	out	0x03, r24	; 3
 1a0:	8f e0       	ldi	r24, 0x0F	; 15
 1a2:	97 e2       	ldi	r25, 0x27	; 39
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <display+0xd6>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <display+0xdc>
 1aa:	00 00       	nop
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	ff 90       	pop	r15
 1b6:	ef 90       	pop	r14
 1b8:	08 95       	ret

000001ba <main>:
unsigned char latch[4] = {0x01, 0x02, 0x04, 0x08};
int i, M10, M1, S10, S1, min, sec, run;
void display(int MIN, int SEC);

int main(void)
{
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
	DDRD = 0xff;
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	81 bb       	out	0x11, r24	; 17
	DDRE = 0x3f;
 1c2:	8f e3       	ldi	r24, 0x3F	; 63
 1c4:	82 b9       	out	0x02, r24	; 2

	while(1){
		display(min, sec);
		if(!(PINE&0x40)){
			run ^=1;
 1c6:	c1 e0       	ldi	r28, 0x01	; 1
 1c8:	d0 e0       	ldi	r29, 0x00	; 0
{
	DDRD = 0xff;
	DDRE = 0x3f;

	while(1){
		display(min, sec);
 1ca:	60 91 18 01 	lds	r22, 0x0118
 1ce:	70 91 19 01 	lds	r23, 0x0119
 1d2:	80 91 14 01 	lds	r24, 0x0114
 1d6:	90 91 15 01 	lds	r25, 0x0115
 1da:	0e 94 67 00 	call	0xce	; 0xce <display>
		if(!(PINE&0x40)){
 1de:	0e 99       	sbic	0x01, 6	; 1
 1e0:	17 c0       	rjmp	.+46     	; 0x210 <main+0x56>
			run ^=1;
 1e2:	80 91 16 01 	lds	r24, 0x0116
 1e6:	90 91 17 01 	lds	r25, 0x0117
 1ea:	8c 27       	eor	r24, r28
 1ec:	9d 27       	eor	r25, r29
 1ee:	90 93 17 01 	sts	0x0117, r25
 1f2:	80 93 16 01 	sts	0x0116, r24
			while(!(PINE&0x40))
 1f6:	0a c0       	rjmp	.+20     	; 0x20c <main+0x52>
				display(min, sec);
 1f8:	60 91 18 01 	lds	r22, 0x0118
 1fc:	70 91 19 01 	lds	r23, 0x0119
 200:	80 91 14 01 	lds	r24, 0x0114
 204:	90 91 15 01 	lds	r25, 0x0115
 208:	0e 94 67 00 	call	0xce	; 0xce <display>

	while(1){
		display(min, sec);
		if(!(PINE&0x40)){
			run ^=1;
			while(!(PINE&0x40))
 20c:	0e 9b       	sbis	0x01, 6	; 1
 20e:	f4 cf       	rjmp	.-24     	; 0x1f8 <main+0x3e>
				display(min, sec);
		}
		if(run == 1){
 210:	80 91 16 01 	lds	r24, 0x0116
 214:	90 91 17 01 	lds	r25, 0x0117
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	91 05       	cpc	r25, r1
 21c:	29 f5       	brne	.+74     	; 0x268 <main+0xae>
			if(++sec == 6000)sec = 0,min++;
 21e:	80 91 18 01 	lds	r24, 0x0118
 222:	90 91 19 01 	lds	r25, 0x0119
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	90 93 19 01 	sts	0x0119, r25
 22c:	80 93 18 01 	sts	0x0118, r24
 230:	27 e1       	ldi	r18, 0x17	; 23
 232:	80 37       	cpi	r24, 0x70	; 112
 234:	92 07       	cpc	r25, r18
 236:	69 f4       	brne	.+26     	; 0x252 <main+0x98>
 238:	10 92 19 01 	sts	0x0119, r1
 23c:	10 92 18 01 	sts	0x0118, r1
 240:	80 91 14 01 	lds	r24, 0x0114
 244:	90 91 15 01 	lds	r25, 0x0115
 248:	01 96       	adiw	r24, 0x01	; 1
 24a:	90 93 15 01 	sts	0x0115, r25
 24e:	80 93 14 01 	sts	0x0114, r24
			if (min == 60)min = 0;
 252:	80 91 14 01 	lds	r24, 0x0114
 256:	90 91 15 01 	lds	r25, 0x0115
 25a:	8c 33       	cpi	r24, 0x3C	; 60
 25c:	91 05       	cpc	r25, r1
 25e:	21 f4       	brne	.+8      	; 0x268 <main+0xae>
 260:	10 92 15 01 	sts	0x0115, r1
 264:	10 92 14 01 	sts	0x0114, r1
		}
		if(!(PINE&0x80))
 268:	0f 99       	sbic	0x01, 7	; 1
 26a:	af cf       	rjmp	.-162    	; 0x1ca <main+0x10>
			if(run == 0) min = 0, sec = 0;
 26c:	80 91 16 01 	lds	r24, 0x0116
 270:	90 91 17 01 	lds	r25, 0x0117
 274:	00 97       	sbiw	r24, 0x00	; 0
 276:	09 f0       	breq	.+2      	; 0x27a <main+0xc0>
 278:	a8 cf       	rjmp	.-176    	; 0x1ca <main+0x10>
 27a:	10 92 15 01 	sts	0x0115, r1
 27e:	10 92 14 01 	sts	0x0114, r1
 282:	10 92 19 01 	sts	0x0119, r1
 286:	10 92 18 01 	sts	0x0118, r1
 28a:	9f cf       	rjmp	.-194    	; 0x1ca <main+0x10>

0000028c <__divmodhi4>:
 28c:	97 fb       	bst	r25, 7
 28e:	09 2e       	mov	r0, r25
 290:	07 26       	eor	r0, r23
 292:	0a d0       	rcall	.+20     	; 0x2a8 <__divmodhi4_neg1>
 294:	77 fd       	sbrc	r23, 7
 296:	04 d0       	rcall	.+8      	; 0x2a0 <__divmodhi4_neg2>
 298:	0c d0       	rcall	.+24     	; 0x2b2 <__udivmodhi4>
 29a:	06 d0       	rcall	.+12     	; 0x2a8 <__divmodhi4_neg1>
 29c:	00 20       	and	r0, r0
 29e:	1a f4       	brpl	.+6      	; 0x2a6 <__divmodhi4_exit>

000002a0 <__divmodhi4_neg2>:
 2a0:	70 95       	com	r23
 2a2:	61 95       	neg	r22
 2a4:	7f 4f       	sbci	r23, 0xFF	; 255

000002a6 <__divmodhi4_exit>:
 2a6:	08 95       	ret

000002a8 <__divmodhi4_neg1>:
 2a8:	f6 f7       	brtc	.-4      	; 0x2a6 <__divmodhi4_exit>
 2aa:	90 95       	com	r25
 2ac:	81 95       	neg	r24
 2ae:	9f 4f       	sbci	r25, 0xFF	; 255
 2b0:	08 95       	ret

000002b2 <__udivmodhi4>:
 2b2:	aa 1b       	sub	r26, r26
 2b4:	bb 1b       	sub	r27, r27
 2b6:	51 e1       	ldi	r21, 0x11	; 17
 2b8:	07 c0       	rjmp	.+14     	; 0x2c8 <__udivmodhi4_ep>

000002ba <__udivmodhi4_loop>:
 2ba:	aa 1f       	adc	r26, r26
 2bc:	bb 1f       	adc	r27, r27
 2be:	a6 17       	cp	r26, r22
 2c0:	b7 07       	cpc	r27, r23
 2c2:	10 f0       	brcs	.+4      	; 0x2c8 <__udivmodhi4_ep>
 2c4:	a6 1b       	sub	r26, r22
 2c6:	b7 0b       	sbc	r27, r23

000002c8 <__udivmodhi4_ep>:
 2c8:	88 1f       	adc	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	5a 95       	dec	r21
 2ce:	a9 f7       	brne	.-22     	; 0x2ba <__udivmodhi4_loop>
 2d0:	80 95       	com	r24
 2d2:	90 95       	com	r25
 2d4:	bc 01       	movw	r22, r24
 2d6:	cd 01       	movw	r24, r26
 2d8:	08 95       	ret

000002da <_exit>:
 2da:	f8 94       	cli

000002dc <__stop_program>:
 2dc:	ff cf       	rjmp	.-2      	; 0x2dc <__stop_program>
