
ATmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000879  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  00000899  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000082  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000004e  00000000  00000000  00000936  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000014a  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000a3  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000001e  00000000  00000000  00000b93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  9c:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <main>:
========================================================*/
#include <avr/io.h>

int main(void)
{
	DDRA = 0xff; //LED포트 A 출력(1) 설정
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	8a bb       	out	0x1a, r24	; 26
	DDRE=0x0f;  //0x3f, 0x00, 0x0f PE7, PE6 입력(0) 설정
  a8:	8f e0       	ldi	r24, 0x0F	; 15
  aa:	82 b9       	out	0x02, r24	; 2
	while(1){
		PORTA = 0xff;
  ac:	3f ef       	ldi	r19, 0xFF	; 255
		if((PINE & 0x40) == 0){
			 PORTA = 0xf0; //SW1 누르면 참, PORTA 0~3번 켜짐
  ae:	20 ef       	ldi	r18, 0xF0	; 240
		}
		else if((PINE & 0x80) == 0){
			 PORTA = 0x0f; //SW2 누르면 참, PORTA 4~7번 켜짐
  b0:	9f e0       	ldi	r25, 0x0F	; 15
int main(void)
{
	DDRA = 0xff; //LED포트 A 출력(1) 설정
	DDRE=0x0f;  //0x3f, 0x00, 0x0f PE7, PE6 입력(0) 설정
	while(1){
		PORTA = 0xff;
  b2:	3b bb       	out	0x1b, r19	; 27
		if((PINE & 0x40) == 0){
  b4:	0e 99       	sbic	0x01, 6	; 1
  b6:	02 c0       	rjmp	.+4      	; 0xbc <main+0x18>
			 PORTA = 0xf0; //SW1 누르면 참, PORTA 0~3번 켜짐
  b8:	2b bb       	out	0x1b, r18	; 27
  ba:	fb cf       	rjmp	.-10     	; 0xb2 <main+0xe>
		}
		else if((PINE & 0x80) == 0){
  bc:	0f 99       	sbic	0x01, 7	; 1
  be:	02 c0       	rjmp	.+4      	; 0xc4 <main+0x20>
			 PORTA = 0x0f; //SW2 누르면 참, PORTA 4~7번 켜짐
  c0:	9b bb       	out	0x1b, r25	; 27
  c2:	f7 cf       	rjmp	.-18     	; 0xb2 <main+0xe>
		 }
		else if((PINE & 0xcf)==0){
  c4:	81 b1       	in	r24, 0x01	; 1
  c6:	8f 7c       	andi	r24, 0xCF	; 207
  c8:	a1 f7       	brne	.-24     	; 0xb2 <main+0xe>
			PORTA = 0x00;
  ca:	1b ba       	out	0x1b, r1	; 27
  cc:	f2 cf       	rjmp	.-28     	; 0xb2 <main+0xe>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
