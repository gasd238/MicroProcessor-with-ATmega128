
ATmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000020e  000002a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080010e  0080010e  000002b0  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000a01  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000043  00000000  00000000  00000a21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000021b  00000000  00000000  00000a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000144  00000000  00000000  00000c7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000020a  00000000  00000000  00000dc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000020  00000000  00000000  00000fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000010e  00000000  00000000  00000ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000046  00000000  00000000  000010fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000038  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e0       	ldi	r30, 0x0E	; 14
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 31       	cpi	r26, 0x1A	; 26
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 67 00 	call	0xce	; 0xce <main>
  c6:	0c 94 05 01 	jmp	0x20a	; 0x20a <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
unsigned char latch[4] = {0x01, 0x02, 0x04, 0x08};
int i, j,fnd[4];

int main(void)
{
	DDRD = 0xff;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	81 bb       	out	0x11, r24	; 17
	DDRE = 0x3f;
  d2:	8f e3       	ldi	r24, 0x3F	; 63
  d4:	82 b9       	out	0x02, r24	; 2
	while(1){
		for(i=0;i<10;i++){
  d6:	10 92 11 01 	sts	0x0111, r1
  da:	10 92 10 01 	sts	0x0110, r1
  de:	31 c0       	rjmp	.+98     	; 0x142 <main+0x74>
			for(j=0;j<4;j++){
  e0:	10 92 0f 01 	sts	0x010F, r1
  e4:	10 92 0e 01 	sts	0x010E, r1
  e8:	1c c0       	rjmp	.+56     	; 0x122 <main+0x54>
				PORTE = latch[j], PORTD = digit[fnd[j]], _delay_ms(2.5);
  ea:	fc 01       	movw	r30, r24
  ec:	e6 5f       	subi	r30, 0xF6	; 246
  ee:	fe 4f       	sbci	r31, 0xFE	; 254
  f0:	20 81       	ld	r18, Z
  f2:	23 b9       	out	0x03, r18	; 3
  f4:	fc 01       	movw	r30, r24
  f6:	ee 0f       	add	r30, r30
  f8:	ff 1f       	adc	r31, r31
  fa:	ee 5e       	subi	r30, 0xEE	; 238
  fc:	fe 4f       	sbci	r31, 0xFE	; 254
  fe:	01 90       	ld	r0, Z+
 100:	f0 81       	ld	r31, Z
 102:	e0 2d       	mov	r30, r0
 104:	e0 50       	subi	r30, 0x00	; 0
 106:	ff 4f       	sbci	r31, 0xFF	; 255
 108:	20 81       	ld	r18, Z
 10a:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	ef e0       	ldi	r30, 0x0F	; 15
 10e:	f7 e2       	ldi	r31, 0x27	; 39
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <main+0x42>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x48>
 116:	00 00       	nop
{
	DDRD = 0xff;
	DDRE = 0x3f;
	while(1){
		for(i=0;i<10;i++){
			for(j=0;j<4;j++){
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	90 93 0f 01 	sts	0x010F, r25
 11e:	80 93 0e 01 	sts	0x010E, r24
 122:	80 91 0e 01 	lds	r24, 0x010E
 126:	90 91 0f 01 	lds	r25, 0x010F
 12a:	84 30       	cpi	r24, 0x04	; 4
 12c:	91 05       	cpc	r25, r1
 12e:	ec f2       	brlt	.-70     	; 0xea <main+0x1c>
int main(void)
{
	DDRD = 0xff;
	DDRE = 0x3f;
	while(1){
		for(i=0;i<10;i++){
 130:	80 91 10 01 	lds	r24, 0x0110
 134:	90 91 11 01 	lds	r25, 0x0111
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	90 93 11 01 	sts	0x0111, r25
 13e:	80 93 10 01 	sts	0x0110, r24
 142:	80 91 10 01 	lds	r24, 0x0110
 146:	90 91 11 01 	lds	r25, 0x0111
 14a:	8a 30       	cpi	r24, 0x0A	; 10
 14c:	91 05       	cpc	r25, r1
 14e:	44 f2       	brlt	.-112    	; 0xe0 <main+0x12>
			for(j=0;j<4;j++){
				PORTE = latch[j], PORTD = digit[fnd[j]], _delay_ms(2.5);
			}
		}

		fnd[0]++;
 150:	80 91 12 01 	lds	r24, 0x0112
 154:	90 91 13 01 	lds	r25, 0x0113
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	90 93 13 01 	sts	0x0113, r25
 15e:	80 93 12 01 	sts	0x0112, r24
		if(fnd[0] == 10) fnd[0] = 0, fnd[1]++;
 162:	8a 30       	cpi	r24, 0x0A	; 10
 164:	91 05       	cpc	r25, r1
 166:	71 f4       	brne	.+28     	; 0x184 <main+0xb6>
 168:	10 92 13 01 	sts	0x0113, r1
 16c:	10 92 12 01 	sts	0x0112, r1
 170:	80 91 14 01 	lds	r24, 0x0114
 174:	90 91 15 01 	lds	r25, 0x0115
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	90 93 15 01 	sts	0x0115, r25
 17e:	80 93 14 01 	sts	0x0114, r24
 182:	a9 cf       	rjmp	.-174    	; 0xd6 <main+0x8>
		else if(fnd[1] == 10) fnd[1] = 0, fnd[2]++;
 184:	80 91 14 01 	lds	r24, 0x0114
 188:	90 91 15 01 	lds	r25, 0x0115
 18c:	8a 30       	cpi	r24, 0x0A	; 10
 18e:	91 05       	cpc	r25, r1
 190:	71 f4       	brne	.+28     	; 0x1ae <main+0xe0>
 192:	10 92 15 01 	sts	0x0115, r1
 196:	10 92 14 01 	sts	0x0114, r1
 19a:	80 91 16 01 	lds	r24, 0x0116
 19e:	90 91 17 01 	lds	r25, 0x0117
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	90 93 17 01 	sts	0x0117, r25
 1a8:	80 93 16 01 	sts	0x0116, r24
 1ac:	94 cf       	rjmp	.-216    	; 0xd6 <main+0x8>
		else if(fnd[2] == 10) fnd[2] = 0, fnd[3]++;
 1ae:	80 91 16 01 	lds	r24, 0x0116
 1b2:	90 91 17 01 	lds	r25, 0x0117
 1b6:	8a 30       	cpi	r24, 0x0A	; 10
 1b8:	91 05       	cpc	r25, r1
 1ba:	71 f4       	brne	.+28     	; 0x1d8 <main+0x10a>
 1bc:	10 92 17 01 	sts	0x0117, r1
 1c0:	10 92 16 01 	sts	0x0116, r1
 1c4:	80 91 18 01 	lds	r24, 0x0118
 1c8:	90 91 19 01 	lds	r25, 0x0119
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	90 93 19 01 	sts	0x0119, r25
 1d2:	80 93 18 01 	sts	0x0118, r24
 1d6:	7f cf       	rjmp	.-258    	; 0xd6 <main+0x8>
		else if(fnd[3] == 10) fnd[0] = 0, fnd[1] = 0, fnd[2] = 0, fnd[3] = 0;
 1d8:	80 91 18 01 	lds	r24, 0x0118
 1dc:	90 91 19 01 	lds	r25, 0x0119
 1e0:	8a 30       	cpi	r24, 0x0A	; 10
 1e2:	91 05       	cpc	r25, r1
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <main+0x11a>
 1e6:	77 cf       	rjmp	.-274    	; 0xd6 <main+0x8>
 1e8:	10 92 13 01 	sts	0x0113, r1
 1ec:	10 92 12 01 	sts	0x0112, r1
 1f0:	10 92 15 01 	sts	0x0115, r1
 1f4:	10 92 14 01 	sts	0x0114, r1
 1f8:	10 92 17 01 	sts	0x0117, r1
 1fc:	10 92 16 01 	sts	0x0116, r1
 200:	10 92 19 01 	sts	0x0119, r1
 204:	10 92 18 01 	sts	0x0118, r1
 208:	66 cf       	rjmp	.-308    	; 0xd6 <main+0x8>

0000020a <_exit>:
 20a:	f8 94       	cli

0000020c <__stop_program>:
 20c:	ff cf       	rjmp	.-2      	; 0x20c <__stop_program>
